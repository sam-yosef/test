 50_000_000: update.message.reply_text("أقصى حجم للملف المسموح به هو 50 ميغابايت.") return update.message.reply_text("جارٍ تحميل الفيديو...") video_path = f'video_{video.file_id}.mp4' context.user_data["input_video"] = video_path video.get_file().download(video_path) keyboard = [[ InlineKeyboardButton("ضغط الفيديو", callback_data='compress'), InlineKeyboardButton("تغيير دقة الشاشة", callback_data='change_resolution') ]] update.message.reply_text('ماذا تود أن أفعل؟', reply_markup=InlineKeyboardMarkup(keyboard)) def compress_options(update: Update, context: CallbackContext): query = update.callback_query query.answer() keyboard = InlineKeyboardMarkup([ [InlineKeyboardButton("منخفض", callback_data='low_quality')], [InlineKeyboardButton("متوسط", callback_data='medium_quality')], [InlineKeyboardButton("عالي", callback_data='high_quality')] ]) query.edit_message_text("ما مستوى ضغط الفيديو التي تريده؟", reply_markup=keyboard) def set_compress_quality(update: Update, context: CallbackContext): query = update.callback_query context.user_data["quality"] = query.data query.answer() keyboard = InlineKeyboardMarkup([ [InlineKeyboardButton("سريعة: أكثر ضغطًا", callback_data='fast')], [InlineKeyboardButton("عادية: توازن بين الجودة والضغط", callback_data='normal')], [InlineKeyboardButton("بطيئة: أقل ضغطًا", callback_data='slow')], ]) query.edit_message_text("ما هي سرعة الضغط المفضلة لديك؟", reply_markup=keyboard) def set_compress_speed(update: Update, context: CallbackContext): query = update.callback_query context.user_data["speed"] = query.data query.answer() input_video = context.user_data["input_video"] output_video = f'output_{input_video}' query.edit_message_text("جارٍ تكويد الفيديو...") ffmpeg.input(input_video).output(output_video, vcodec="libx265", crf=context.user_data["quality"], preset=context.user_data["speed"]).run() with open(output_video, "rb") as video_file: query.edit_message_text("إليك الفيديو المكوَّد:") query.message.reply_video(video_file) os.remove(input_video) os.remove(output_video) def main(): updater = Updater(TOKEN) dispatcher = updater.dispatcher dispatcher.add_handler(CommandHandler("start", start)) dispatcher.add_handler(MessageHandler(Filters.video | Filters.document.video, process_video)) dispatcher.add_handler(CallbackQueryHandler(compress_options, pattern='^compress$')) dispatcher.add_handler(CallbackQueryHandler(set_compress_quality, pattern="^(low_quality|medium_quality|high_quality)$")) dispatcher.add_handler(CallbackQueryHandler(set_compress_speed, pattern="^(fast|normal|slow)$")) updater.start_polling() updater.idle() if __name__ == "__main__": main() 